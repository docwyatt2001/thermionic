// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/thermionic/internal/db/cluster (interfaces: NameProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNameProvider is a mock of NameProvider interface
type MockNameProvider struct {
	ctrl     *gomock.Controller
	recorder *MockNameProviderMockRecorder
}

// MockNameProviderMockRecorder is the mock recorder for MockNameProvider
type MockNameProviderMockRecorder struct {
	mock *MockNameProvider
}

// NewMockNameProvider creates a new mock instance
func NewMockNameProvider(ctrl *gomock.Controller) *MockNameProvider {
	mock := &MockNameProvider{ctrl: ctrl}
	mock.recorder = &MockNameProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNameProvider) EXPECT() *MockNameProviderMockRecorder {
	return m.recorder
}

// DriverName mocks base method
func (m *MockNameProvider) DriverName() string {
	ret := m.ctrl.Call(m, "DriverName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DriverName indicates an expected call of DriverName
func (mr *MockNameProviderMockRecorder) DriverName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriverName", reflect.TypeOf((*MockNameProvider)(nil).DriverName))
}
