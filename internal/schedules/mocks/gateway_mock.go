// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/thermionic/internal/schedules (interfaces: Gateway)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGateway is a mock of Gateway interface
type MockGateway struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayMockRecorder
}

// MockGatewayMockRecorder is the mock recorder for MockGateway
type MockGatewayMockRecorder struct {
	mock *MockGateway
}

// NewMockGateway creates a new mock instance
func NewMockGateway(ctrl *gomock.Controller) *MockGateway {
	mock := &MockGateway{ctrl: ctrl}
	mock.recorder = &MockGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGateway) EXPECT() *MockGatewayMockRecorder {
	return m.recorder
}

// IsDatabaseNode mocks base method
func (m *MockGateway) IsDatabaseNode() bool {
	ret := m.ctrl.Call(m, "IsDatabaseNode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDatabaseNode indicates an expected call of IsDatabaseNode
func (mr *MockGatewayMockRecorder) IsDatabaseNode() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDatabaseNode", reflect.TypeOf((*MockGateway)(nil).IsDatabaseNode))
}

// LeaderAddress mocks base method
func (m *MockGateway) LeaderAddress() (string, error) {
	ret := m.ctrl.Call(m, "LeaderAddress")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaderAddress indicates an expected call of LeaderAddress
func (mr *MockGatewayMockRecorder) LeaderAddress() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaderAddress", reflect.TypeOf((*MockGateway)(nil).LeaderAddress))
}
