// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/thermionic/internal/cluster/upgraded (interfaces: OS)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOS is a mock of OS interface
type MockOS struct {
	ctrl     *gomock.Controller
	recorder *MockOSMockRecorder
}

// MockOSMockRecorder is the mock recorder for MockOS
type MockOSMockRecorder struct {
	mock *MockOS
}

// NewMockOS creates a new mock instance
func NewMockOS(ctrl *gomock.Controller) *MockOS {
	mock := &MockOS{ctrl: ctrl}
	mock.recorder = &MockOSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOS) EXPECT() *MockOSMockRecorder {
	return m.recorder
}

// GlobalDatabaseDir mocks base method
func (m *MockOS) GlobalDatabaseDir() string {
	ret := m.ctrl.Call(m, "GlobalDatabaseDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// GlobalDatabaseDir indicates an expected call of GlobalDatabaseDir
func (mr *MockOSMockRecorder) GlobalDatabaseDir() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalDatabaseDir", reflect.TypeOf((*MockOS)(nil).GlobalDatabaseDir))
}

// GlobalDatabasePath mocks base method
func (m *MockOS) GlobalDatabasePath() string {
	ret := m.ctrl.Call(m, "GlobalDatabasePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GlobalDatabasePath indicates an expected call of GlobalDatabasePath
func (mr *MockOSMockRecorder) GlobalDatabasePath() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalDatabasePath", reflect.TypeOf((*MockOS)(nil).GlobalDatabasePath))
}

// LocalDatabasePath mocks base method
func (m *MockOS) LocalDatabasePath() string {
	ret := m.ctrl.Call(m, "LocalDatabasePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// LocalDatabasePath indicates an expected call of LocalDatabasePath
func (mr *MockOSMockRecorder) LocalDatabasePath() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalDatabasePath", reflect.TypeOf((*MockOS)(nil).LocalDatabasePath))
}

// VarDir mocks base method
func (m *MockOS) VarDir() string {
	ret := m.ctrl.Call(m, "VarDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// VarDir indicates an expected call of VarDir
func (mr *MockOSMockRecorder) VarDir() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VarDir", reflect.TypeOf((*MockOS)(nil).VarDir))
}
