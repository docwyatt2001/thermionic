// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/thermionic/internal/cluster (interfaces: RaftInstance)

// Package mocks is a generated GoMock package.
package mocks

import (
	go_dqlite "github.com/CanonicalLtd/go-dqlite"
	raft_membership "github.com/CanonicalLtd/raft-membership"
	gomock "github.com/golang/mock/gomock"
	raft "github.com/hashicorp/raft"
	http "net/http"
	reflect "reflect"
)

// MockRaftInstance is a mock of RaftInstance interface
type MockRaftInstance struct {
	ctrl     *gomock.Controller
	recorder *MockRaftInstanceMockRecorder
}

// MockRaftInstanceMockRecorder is the mock recorder for MockRaftInstance
type MockRaftInstanceMockRecorder struct {
	mock *MockRaftInstance
}

// NewMockRaftInstance creates a new mock instance
func NewMockRaftInstance(ctrl *gomock.Controller) *MockRaftInstance {
	mock := &MockRaftInstance{ctrl: ctrl}
	mock.recorder = &MockRaftInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRaftInstance) EXPECT() *MockRaftInstanceMockRecorder {
	return m.recorder
}

// HandlerFunc mocks base method
func (m *MockRaftInstance) HandlerFunc() http.HandlerFunc {
	ret := m.ctrl.Call(m, "HandlerFunc")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// HandlerFunc indicates an expected call of HandlerFunc
func (mr *MockRaftInstanceMockRecorder) HandlerFunc() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlerFunc", reflect.TypeOf((*MockRaftInstance)(nil).HandlerFunc))
}

// Init mocks base method
func (m *MockRaftInstance) Init() error {
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockRaftInstanceMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockRaftInstance)(nil).Init))
}

// MembershipChanger mocks base method
func (m *MockRaftInstance) MembershipChanger() raft_membership.Changer {
	ret := m.ctrl.Call(m, "MembershipChanger")
	ret0, _ := ret[0].(raft_membership.Changer)
	return ret0
}

// MembershipChanger indicates an expected call of MembershipChanger
func (mr *MockRaftInstanceMockRecorder) MembershipChanger() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MembershipChanger", reflect.TypeOf((*MockRaftInstance)(nil).MembershipChanger))
}

// Raft mocks base method
func (m *MockRaftInstance) Raft() *raft.Raft {
	ret := m.ctrl.Call(m, "Raft")
	ret0, _ := ret[0].(*raft.Raft)
	return ret0
}

// Raft indicates an expected call of Raft
func (mr *MockRaftInstanceMockRecorder) Raft() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raft", reflect.TypeOf((*MockRaftInstance)(nil).Raft))
}

// Registry mocks base method
func (m *MockRaftInstance) Registry() *go_dqlite.Registry {
	ret := m.ctrl.Call(m, "Registry")
	ret0, _ := ret[0].(*go_dqlite.Registry)
	return ret0
}

// Registry indicates an expected call of Registry
func (mr *MockRaftInstanceMockRecorder) Registry() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registry", reflect.TypeOf((*MockRaftInstance)(nil).Registry))
}

// Servers mocks base method
func (m *MockRaftInstance) Servers() ([]raft.Server, error) {
	ret := m.ctrl.Call(m, "Servers")
	ret0, _ := ret[0].([]raft.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Servers indicates an expected call of Servers
func (mr *MockRaftInstanceMockRecorder) Servers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Servers", reflect.TypeOf((*MockRaftInstance)(nil).Servers))
}

// Shutdown mocks base method
func (m *MockRaftInstance) Shutdown() error {
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockRaftInstanceMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockRaftInstance)(nil).Shutdown))
}
