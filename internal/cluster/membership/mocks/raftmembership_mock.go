// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CanonicalLtd/raft-membership (interfaces: Changer)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	raft "github.com/hashicorp/raft"
	reflect "reflect"
	time "time"
)

// MockChanger is a mock of Changer interface
type MockChanger struct {
	ctrl     *gomock.Controller
	recorder *MockChangerMockRecorder
}

// MockChangerMockRecorder is the mock recorder for MockChanger
type MockChangerMockRecorder struct {
	mock *MockChanger
}

// NewMockChanger creates a new mock instance
func NewMockChanger(ctrl *gomock.Controller) *MockChanger {
	mock := &MockChanger{ctrl: ctrl}
	mock.recorder = &MockChangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChanger) EXPECT() *MockChangerMockRecorder {
	return m.recorder
}

// Join mocks base method
func (m *MockChanger) Join(arg0 raft.ServerID, arg1 raft.ServerAddress, arg2 time.Duration) error {
	ret := m.ctrl.Call(m, "Join", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Join indicates an expected call of Join
func (mr *MockChangerMockRecorder) Join(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockChanger)(nil).Join), arg0, arg1, arg2)
}

// Leave mocks base method
func (m *MockChanger) Leave(arg0 raft.ServerID, arg1 raft.ServerAddress, arg2 time.Duration) error {
	ret := m.ctrl.Call(m, "Leave", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Leave indicates an expected call of Leave
func (mr *MockChangerMockRecorder) Leave(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockChanger)(nil).Leave), arg0, arg1, arg2)
}
