// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/thermionic/internal/cluster/raft (interfaces: RegistryProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	go_dqlite "github.com/CanonicalLtd/go-dqlite"
	gomock "github.com/golang/mock/gomock"
	raft "github.com/hashicorp/raft"
	reflect "reflect"
)

// MockRegistryProvider is a mock of RegistryProvider interface
type MockRegistryProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryProviderMockRecorder
}

// MockRegistryProviderMockRecorder is the mock recorder for MockRegistryProvider
type MockRegistryProviderMockRecorder struct {
	mock *MockRegistryProvider
}

// NewMockRegistryProvider creates a new mock instance
func NewMockRegistryProvider(ctrl *gomock.Controller) *MockRegistryProvider {
	mock := &MockRegistryProvider{ctrl: ctrl}
	mock.recorder = &MockRegistryProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistryProvider) EXPECT() *MockRegistryProviderMockRecorder {
	return m.recorder
}

// FSM mocks base method
func (m *MockRegistryProvider) FSM(arg0 *go_dqlite.Registry) raft.FSM {
	ret := m.ctrl.Call(m, "FSM", arg0)
	ret0, _ := ret[0].(raft.FSM)
	return ret0
}

// FSM indicates an expected call of FSM
func (mr *MockRegistryProviderMockRecorder) FSM(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FSM", reflect.TypeOf((*MockRegistryProvider)(nil).FSM), arg0)
}

// Registry mocks base method
func (m *MockRegistryProvider) Registry(arg0 string) *go_dqlite.Registry {
	ret := m.ctrl.Call(m, "Registry", arg0)
	ret0, _ := ret[0].(*go_dqlite.Registry)
	return ret0
}

// Registry indicates an expected call of Registry
func (mr *MockRegistryProviderMockRecorder) Registry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registry", reflect.TypeOf((*MockRegistryProvider)(nil).Registry), arg0)
}
