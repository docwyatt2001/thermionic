// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hashicorp/raft (interfaces: Transport,SnapshotStore,FSM)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	raft "github.com/hashicorp/raft"
	io "io"
	reflect "reflect"
)

// MockTransport is a mock of Transport interface
type MockTransport struct {
	ctrl     *gomock.Controller
	recorder *MockTransportMockRecorder
}

// MockTransportMockRecorder is the mock recorder for MockTransport
type MockTransportMockRecorder struct {
	mock *MockTransport
}

// NewMockTransport creates a new mock instance
func NewMockTransport(ctrl *gomock.Controller) *MockTransport {
	mock := &MockTransport{ctrl: ctrl}
	mock.recorder = &MockTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransport) EXPECT() *MockTransportMockRecorder {
	return m.recorder
}

// AppendEntries mocks base method
func (m *MockTransport) AppendEntries(arg0 raft.ServerID, arg1 raft.ServerAddress, arg2 *raft.AppendEntriesRequest, arg3 *raft.AppendEntriesResponse) error {
	ret := m.ctrl.Call(m, "AppendEntries", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendEntries indicates an expected call of AppendEntries
func (mr *MockTransportMockRecorder) AppendEntries(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEntries", reflect.TypeOf((*MockTransport)(nil).AppendEntries), arg0, arg1, arg2, arg3)
}

// AppendEntriesPipeline mocks base method
func (m *MockTransport) AppendEntriesPipeline(arg0 raft.ServerID, arg1 raft.ServerAddress) (raft.AppendPipeline, error) {
	ret := m.ctrl.Call(m, "AppendEntriesPipeline", arg0, arg1)
	ret0, _ := ret[0].(raft.AppendPipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendEntriesPipeline indicates an expected call of AppendEntriesPipeline
func (mr *MockTransportMockRecorder) AppendEntriesPipeline(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEntriesPipeline", reflect.TypeOf((*MockTransport)(nil).AppendEntriesPipeline), arg0, arg1)
}

// Consumer mocks base method
func (m *MockTransport) Consumer() <-chan raft.RPC {
	ret := m.ctrl.Call(m, "Consumer")
	ret0, _ := ret[0].(<-chan raft.RPC)
	return ret0
}

// Consumer indicates an expected call of Consumer
func (mr *MockTransportMockRecorder) Consumer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumer", reflect.TypeOf((*MockTransport)(nil).Consumer))
}

// DecodePeer mocks base method
func (m *MockTransport) DecodePeer(arg0 []byte) raft.ServerAddress {
	ret := m.ctrl.Call(m, "DecodePeer", arg0)
	ret0, _ := ret[0].(raft.ServerAddress)
	return ret0
}

// DecodePeer indicates an expected call of DecodePeer
func (mr *MockTransportMockRecorder) DecodePeer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodePeer", reflect.TypeOf((*MockTransport)(nil).DecodePeer), arg0)
}

// EncodePeer mocks base method
func (m *MockTransport) EncodePeer(arg0 raft.ServerID, arg1 raft.ServerAddress) []byte {
	ret := m.ctrl.Call(m, "EncodePeer", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// EncodePeer indicates an expected call of EncodePeer
func (mr *MockTransportMockRecorder) EncodePeer(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodePeer", reflect.TypeOf((*MockTransport)(nil).EncodePeer), arg0, arg1)
}

// InstallSnapshot mocks base method
func (m *MockTransport) InstallSnapshot(arg0 raft.ServerID, arg1 raft.ServerAddress, arg2 *raft.InstallSnapshotRequest, arg3 *raft.InstallSnapshotResponse, arg4 io.Reader) error {
	ret := m.ctrl.Call(m, "InstallSnapshot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallSnapshot indicates an expected call of InstallSnapshot
func (mr *MockTransportMockRecorder) InstallSnapshot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallSnapshot", reflect.TypeOf((*MockTransport)(nil).InstallSnapshot), arg0, arg1, arg2, arg3, arg4)
}

// LocalAddr mocks base method
func (m *MockTransport) LocalAddr() raft.ServerAddress {
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(raft.ServerAddress)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr
func (mr *MockTransportMockRecorder) LocalAddr() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockTransport)(nil).LocalAddr))
}

// RequestVote mocks base method
func (m *MockTransport) RequestVote(arg0 raft.ServerID, arg1 raft.ServerAddress, arg2 *raft.RequestVoteRequest, arg3 *raft.RequestVoteResponse) error {
	ret := m.ctrl.Call(m, "RequestVote", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestVote indicates an expected call of RequestVote
func (mr *MockTransportMockRecorder) RequestVote(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVote", reflect.TypeOf((*MockTransport)(nil).RequestVote), arg0, arg1, arg2, arg3)
}

// SetHeartbeatHandler mocks base method
func (m *MockTransport) SetHeartbeatHandler(arg0 func(raft.RPC)) {
	m.ctrl.Call(m, "SetHeartbeatHandler", arg0)
}

// SetHeartbeatHandler indicates an expected call of SetHeartbeatHandler
func (mr *MockTransportMockRecorder) SetHeartbeatHandler(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeartbeatHandler", reflect.TypeOf((*MockTransport)(nil).SetHeartbeatHandler), arg0)
}

// MockSnapshotStore is a mock of SnapshotStore interface
type MockSnapshotStore struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotStoreMockRecorder
}

// MockSnapshotStoreMockRecorder is the mock recorder for MockSnapshotStore
type MockSnapshotStoreMockRecorder struct {
	mock *MockSnapshotStore
}

// NewMockSnapshotStore creates a new mock instance
func NewMockSnapshotStore(ctrl *gomock.Controller) *MockSnapshotStore {
	mock := &MockSnapshotStore{ctrl: ctrl}
	mock.recorder = &MockSnapshotStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshotStore) EXPECT() *MockSnapshotStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSnapshotStore) Create(arg0 raft.SnapshotVersion, arg1, arg2 uint64, arg3 raft.Configuration, arg4 uint64, arg5 raft.Transport) (raft.SnapshotSink, error) {
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(raft.SnapshotSink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSnapshotStoreMockRecorder) Create(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSnapshotStore)(nil).Create), arg0, arg1, arg2, arg3, arg4, arg5)
}

// List mocks base method
func (m *MockSnapshotStore) List() ([]*raft.SnapshotMeta, error) {
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*raft.SnapshotMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockSnapshotStoreMockRecorder) List() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSnapshotStore)(nil).List))
}

// Open mocks base method
func (m *MockSnapshotStore) Open(arg0 string) (*raft.SnapshotMeta, io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(*raft.SnapshotMeta)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Open indicates an expected call of Open
func (mr *MockSnapshotStoreMockRecorder) Open(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockSnapshotStore)(nil).Open), arg0)
}

// MockFSM is a mock of FSM interface
type MockFSM struct {
	ctrl     *gomock.Controller
	recorder *MockFSMMockRecorder
}

// MockFSMMockRecorder is the mock recorder for MockFSM
type MockFSMMockRecorder struct {
	mock *MockFSM
}

// NewMockFSM creates a new mock instance
func NewMockFSM(ctrl *gomock.Controller) *MockFSM {
	mock := &MockFSM{ctrl: ctrl}
	mock.recorder = &MockFSMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFSM) EXPECT() *MockFSMMockRecorder {
	return m.recorder
}

// Apply mocks base method
func (m *MockFSM) Apply(arg0 *raft.Log) interface{} {
	ret := m.ctrl.Call(m, "Apply", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Apply indicates an expected call of Apply
func (mr *MockFSMMockRecorder) Apply(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockFSM)(nil).Apply), arg0)
}

// Restore mocks base method
func (m *MockFSM) Restore(arg0 io.ReadCloser) error {
	ret := m.ctrl.Call(m, "Restore", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore
func (mr *MockFSMMockRecorder) Restore(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockFSM)(nil).Restore), arg0)
}

// Snapshot mocks base method
func (m *MockFSM) Snapshot() (raft.FSMSnapshot, error) {
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(raft.FSMSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshot indicates an expected call of Snapshot
func (mr *MockFSMMockRecorder) Snapshot() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockFSM)(nil).Snapshot))
}
