// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/thermionic/internal/cluster/raft (interfaces: HTTPProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	raft_http "github.com/CanonicalLtd/raft-http"
	gomock "github.com/golang/mock/gomock"
	log "log"
	net "net"
	reflect "reflect"
)

// MockHTTPProvider is a mock of HTTPProvider interface
type MockHTTPProvider struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPProviderMockRecorder
}

// MockHTTPProviderMockRecorder is the mock recorder for MockHTTPProvider
type MockHTTPProviderMockRecorder struct {
	mock *MockHTTPProvider
}

// NewMockHTTPProvider creates a new mock instance
func NewMockHTTPProvider(ctrl *gomock.Controller) *MockHTTPProvider {
	mock := &MockHTTPProvider{ctrl: ctrl}
	mock.recorder = &MockHTTPProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPProvider) EXPECT() *MockHTTPProviderMockRecorder {
	return m.recorder
}

// Handler mocks base method
func (m *MockHTTPProvider) Handler(arg0 *log.Logger) *raft_http.Handler {
	ret := m.ctrl.Call(m, "Handler", arg0)
	ret0, _ := ret[0].(*raft_http.Handler)
	return ret0
}

// Handler indicates an expected call of Handler
func (mr *MockHTTPProviderMockRecorder) Handler(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockHTTPProvider)(nil).Handler), arg0)
}

// Layer mocks base method
func (m *MockHTTPProvider) Layer(arg0 string, arg1 net.Addr, arg2 *raft_http.Handler, arg3 raft_http.Dial, arg4 *log.Logger) *raft_http.Layer {
	ret := m.ctrl.Call(m, "Layer", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*raft_http.Layer)
	return ret0
}

// Layer indicates an expected call of Layer
func (mr *MockHTTPProviderMockRecorder) Layer(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Layer", reflect.TypeOf((*MockHTTPProvider)(nil).Layer), arg0, arg1, arg2, arg3, arg4)
}
